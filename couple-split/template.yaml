AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  couple-split

Globals:
  Function:
    Timeout: 600
    MemorySize: 256
    LoggingConfig:
      LogFormat: JSON

Parameters:
  ExistingTransactionSplitTable:
    Type: String
    Default: "TransactionSplitTable"
    Description: "Name of the existing TransactionSplitTable (if it exists)."

  ExistingHashTable:
    Type: String
    Default: "HashTable"
    Description: "Name of the existing HashTable (if it exists)."

  ExistingSplitTable:
    Type: String
    Default: "SplitTable"
    Description: "Name of the existing SplitTable (if it exists)."

Resources:
  Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: couple-split-app-project
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: index.html
    AccessControl: Private
    BucketPolicy:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: "DenyPublicAccess"
            Effect: Deny
            Principal: "*"
            Action: "s3:GetObject"
            Resource: "arn:aws:s3:::couple-split-app-project/*"
            Condition:
              Bool:
                "aws:SecureTransport": "false"
          - Sid: "AllowPersonalAccess"
            Effect: Allow
            Principal:
              AWS: "arn:aws:iam::<your-aws-account-id>:root"
            Action: "s3:GetObject"
            Resource: "arn:aws:s3:::couple-split-app-project/*"

  CSVConverterLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/csv_converter/
      Handler: lambda_function.lambda_handler
      Runtime: python3.11
      Layers:
        - arn:aws:lambda:us-east-1:336392948345:layer:AWSSDKPandas-Python311:1
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ExistingTransactionSplitTable
        - DynamoDBCrudPolicy:
            TableName: !Ref ExistingHashTable
        - DynamoDBCrudPolicy:
            TableName: !Ref ExistingSplitTable
        - Statement:
            Effect: Allow
            Action:
              - s3:GetObject
              - s3:PutObject
              - s3:DeleteObject
            Resource: arn:aws:s3:::couple-split-app-project/*
      Events:
        MyS3Event:
          Type: S3
          Properties:
            Bucket: !Ref Bucket
            Events: s3:ObjectCreated:*
            Filter:
              S3Key:
                Rules:
                  - Name: prefix
                    Value: input_csv/

  FetchTransactionsLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/fetch_transactions/
      Handler: lambda_function.lambda_handler
      Runtime: python3.11
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref ExistingTransactionSplitTable
      Events:
        FetchApi:
          Type: Api
          Properties:
            Path: /fetch-transactions
            Method: get
            Auth:
              AuthorizationType: AWS_IAM

  UpdateTransactionsLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/update_transactions/
      Handler: lambda_function.lambda_handler
      Runtime: python3.11
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ExistingTransactionSplitTable
        - DynamoDBReadPolicy:
            TableName: !Ref ExistingSplitTable
      Events:
        UpdateTransactionsApi:
          Type: Api
          Properties:
            Path: /update-transactions
            Method: post
            Auth:
              AuthorizationType: AWS_IAM

  # Lambda Function for Fetching Categories
  FetchCategoriesFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/fetch_categories/
      Handler: lambda_function.lambda_handler
      Runtime: python3.11
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ExistingSplitTable
      Events:
        FetchCategoriesAPI:
          Type: Api
          Properties:
            Path: /fetch-categories
            Method: get
            

# Uncommented DynamoDB Table Resources (they already exist, so commented out)
#
  TransactionSplitTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: TransactionSplitTable
      AttributeDefinitions:
        - AttributeName: hash
          AttributeType: S
      KeySchema:
        - AttributeName: hash
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  HashTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: HashTable
      AttributeDefinitions:
        - AttributeName: hash
          AttributeType: S
      KeySchema:
        - AttributeName: hash
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2
#
#   SplitTable:
#     Type: AWS::DynamoDB::Table
#     Properties:
#       TableName: SplitTable
#       AttributeDefinitions:
#         - AttributeName: userid
#           AttributeType: S
#         - AttributeName: category
#           AttributeType: S
#       KeySchema:
#         - AttributeName: userid
#           KeyType: HASH
#         - AttributeName: category
#           KeyType: RANGE
#       ProvisionedThroughput:
#         ReadCapacityUnits: 2
#         WriteCapacityUnits: 2

Outputs:
  CSVConverterLambda:
    Description: CSV Converter Lambda Function ARN
    Value: !GetAtt CSVConverterLambda.Arn

  FetchTransactionsApiEndpoint:
    Description: API Gateway endpoint URL for FetchTransactions
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/fetch-transactions"

  UpdateTransactionsApiEndpoint:
    Description: API Gateway endpoint URL for UpdateTransactions
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/update-transactions"

  FetchCategoriesApi:
    Description: "API Gateway URL for Fetching Categories"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/fetch-categories"


  Bucket:
    Description: S3 Bucket
    Value: !Ref Bucket

  TransactionSplitTable:
    Description: Name of the DynamoDB TransactionSplitTable
    Value: !Ref ExistingTransactionSplitTable

  HashTable:
    Description: Name of the DynamoDB HashTable
    Value: !Ref ExistingHashTable

  SplitTable:
    Description: Name of the DynamoDB SplitTable
    Value: !Ref ExistingSplitTable
